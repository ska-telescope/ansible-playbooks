---
- name: resolve platform specific vars
  include_vars: '{{ docker_vars }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml'
        - '{{ ansible_distribution }}.yml'
        - '{{ ansible_os_family }}.yml'
      skip: true
      paths:
        - '{{ role_path }}/../../vars'
  loop_control:
    loop_var: docker_vars

- name: install pip and dev dependencies
  become: true
  apt:
    pkg:
      - python-pip # TODO: In the future the all playbook must use Python 3
    state: present

- name: install pyhelm and dependencies
  pip:
    name:
      - pyhelm
    state: present

- name: Install conntrack package ## Requirement for Kubernetes 1.18 +
  apt:
    name: conntrack
    state: present
  become: true

- name: set facts for minikube
  set_fact:
    "minikube_use_calico": "false"
    "minikube_use_nginx": "{{ use_nginx|bool }}"
    "user_home": "{{ lookup('env','HOME') }}"
    "minikube_check": !unsafe >-
      minikube status --format "host: {{.Host}} kubelet: {{.Kubelet}} apiserver: {{.APIServer}} kubectl: {{.Kubeconfig}}"
    "minikube_driver": "{{ 'none' if not use_driver or use_driver == 'none' else ('hyperkit' if ansible_os_family == 'Darwin' else 'kvm2') }}"

- name: Before minikube configuration, we check minikube status
  shell: "{{ minikube_check }} | grep 'host: '"
  args:
    executable: /bin/bash
  ignore_errors: true
  register: starting_minikube_status
  ignore_errors: true 

- name: Install Minikube
  block:
    - name: Tidy up previous Minikube
      become: true
      file:
        path: "{{ kfile }}"
        state: absent
      with_items:
        - "{{ user_home }}/.kube"
        - /var/lib/kubeadm.yaml
        - /data/minikube
        - /var/lib/minikube
        - /var/lib/kubelet
        - /etc/kubernetes
        - /etc/cni
        - /opt/cni
        - /var/lib/calico
      loop_control:
        loop_var: kfile

    - name: Setup the directory for storing Minikube and kubectl configuration.
      file:
        path: "{{ user_home }}/.kube"
        state: directory
        owner: root
        group: "{{ 'wheel' if ansible_os_family == 'Darwin' else 'root' }}"
        mode: "0755"
      become: true
      become_method: sudo
      become_flags: '-E -S -n'
      when: "minikube_driver == 'none'"

    - name: Create empty file(config) under directory.
      file:
        path: "{{ user_home }}/.kube/config"
        state: touch
        mode: "0640"
      become: true
      become_method: sudo
      become_flags: '-E -S -n'
      when: "minikube_driver == 'none'"

    - name: set minikube environment
      blockinfile:
        dest: "{{ user_home }}/{{ rcfile }}"
        create: yes
        block: |
          export MINIKUBE_WANTUPDATENOTIFICATION=false
          export MINIKUBE_WANTREPORTERRORPROMPT=false
          export MINIKUBE_HOME=$HOME
          export CHANGE_MINIKUBE_NONE_USER=true
          export KUBECONFIG=$HOME/.kube/config
        marker: "# {mark} ANSIBLE MANAGED BLOCK for minikube"
      with_items:
        - .profile
        - .bashrc
      loop_control:
        loop_var: rcfile

    - name: Start Minikube with option vm-driver={{ minikube_driver }} and with Calico
      shell: >
        minikube start  --disk-size  {{ minikube_disk_size }}
        --memory  {{ minikube_memory }}
        --cpus {{ minikube_cpus }}
        --extra-config=kubelet.network-plugin=cni
        --extra-config=kubelet.resolv-conf={{ minikube_resolver }}
        --extra-config=kubeadm.pod-network-cidr=10.200.0.0/16
        --network-plugin=cni
        --vm-driver={{ minikube_driver }}
      environment:
        MINIKUBE_WANTUPDATENOTIFICATION: false
        MINIKUBE_WANTREPORTERRORPROMPT: false
        MINIKUBE_HOME: "{{ user_home }}"
        CHANGE_MINIKUBE_NONE_USER: true
        KUBECONFIG: "{{ user_home }}/.kube/config"
      become: "{{ 'true' if minikube_driver == 'none' else 'false' }}"
      become_method: sudo
      become_flags: '-E -S -n'
      when: "minikube_use_calico"

    - name: Start Minikube with option vm-driver={{ minikube_driver }} without Calico
      shell: >
        minikube start  --disk-size  {{ minikube_disk_size }}
        --memory  {{ minikube_memory }}
        --cpus {{ minikube_cpus }}
        --extra-config=kubelet.resolv-conf={{ minikube_resolver }}
        --vm-driver={{ minikube_driver }}
      environment:
        MINIKUBE_WANTUPDATENOTIFICATION: false
        MINIKUBE_WANTREPORTERRORPROMPT: false
        MINIKUBE_HOME: "{{ user_home }}"
        CHANGE_MINIKUBE_NONE_USER: true
        KUBECONFIG: "{{ user_home }}/.kube/config"
      become: "{{ 'true' if minikube_driver == 'none' else 'false' }}"
      become_method: sudo
      become_flags: '-E -S -n'
      when: "not minikube_use_calico"

      # host: Running kubelet: Running apiserver: Running kubectl: Correctly Configured: pointing to minikube-vm
    - name: After minikube configuration, we check minikube status
      shell: "{{ minikube_check }}"
      args:
        executable: /bin/bash
      register: minikube_status
      until: "'minikube-vm' and 'host: Running' and 'kubelet: Running' and 'apiserver: Running' in minikube_status.stdout"
      delay: 30
      retries: 10

    - name: Install networking
      block:

        - name: Check if "Networking is active"
          shell: kubectl get deployment calico-kube-controllers --namespace kube-system
          changed_when: False
          register: kubectl_calico
          ignore_errors: true

        - name: Init Cluster networking with Calico.
          shell: kubectl
                apply -f https://docs.projectcalico.org/{{ calico_version }}/manifests/calico.yaml
          when: not kubectl_calico.rc == 0

        - name: ansible_default_ipv4.interface
          debug: var=ansible_default_ipv4.interface

        - name: Reconfigure calico-node.
          shell: kubectl -n kube-system set env daemonset/calico-node {{ item }}
          with_items:
            - "FELIX_XDPENABLED=false"
            - "CALICO_IPV4POOL_CIDR=10.200.0.0/16"
            - "IP_AUTODETECTION_METHOD=interface={{ ansible_default_ipv4.interface }}"
          when: not kubectl_calico.rc == 0

        - name: Wait for Networking to come up
          shell: "kubectl get pods --field-selector 'status.phase!=Running' --namespace kube-system"
          register: calico_check
          until: calico_check.stdout_lines | reject('search','^No resources found') | list | count == 0
          retries: 20
          delay: 30
      when: minikube_use_calico

  when: "not ('minikube-vm' and 'host: Running' and 'kubelet: Running' and 'apiserver: Running' in starting_minikube_status.stdout)"

- name: Enable default NGINX Ingress Controller
  shell: minikube addons enable ingress
  environment:
    MINIKUBE_WANTUPDATENOTIFICATION: false
    MINIKUBE_WANTREPORTERRORPROMPT: false
    MINIKUBE_HOME: "{{ user_home }}"
    CHANGE_MINIKUBE_NONE_USER: true
    KUBECONFIG: "{{ user_home }}/.kube/config"
  become: true
  become_method: sudo
  become_flags: '-E -S -n'
  when: "minikube_use_nginx"

- name: Activate Traefik Ingress Controller
  block:

    - name: Get the ingress status
      shell: "minikube addons list | grep ingress"
      args:
        executable: /bin/bash
      register: ingress_check

    - name: set etcd_endpoint fact
      set_fact:
        "ingress_state": "{{ ingress_check.stdout }}"

    - name: Disable default NGINX Ingress Controller
      shell: minikube addons disable ingress
      environment:
        MINIKUBE_WANTUPDATENOTIFICATION: false
        MINIKUBE_WANTREPORTERRORPROMPT: false
        MINIKUBE_HOME: "{{ user_home }}"
        CHANGE_MINIKUBE_NONE_USER: true
        KUBECONFIG: "{{ user_home }}/.kube/config"
      become: true
      become_method: sudo
      become_flags: '-E -S -n'
      when: '"enabled" in ingress_state'

    - name: Install traefik
      shell:
        if ! helm list -n kube-system | grep -q traefik0; then \
        helm install traefik0 stable/traefik --namespace=kube-system --set externalIP={{ansible_default_ipv4.address}}; fi
    
    # - name: Install traefik
    #   helm:
    #     chart:
    #       name: traefik
    #       source:
    #         type: repo
    #         location: "{{ helm_stable_repo_url }}"
    #     state: present
    #     name: traefik0
    #     namespace: kube-system
    #     values:
    #       externalIP: "{{ ansible_default_ipv4.address }} "
  when: "not minikube_use_nginx"

# https://github.com/kubernetes/kube-state-metrics/tree/master/examples/standard
- name: Check if "kube-state-metrics is active"
  shell: kubectl get deployment kube-state-metrics --namespace kube-system
  changed_when: False
  register: kubectl_metrics
  ignore_errors: true

- name: Activate kube-state-metrics
  block:

    - name: Init kube-state-metrics.
      shell: kubectl \
            apply -f https://raw.githubusercontent.com/kubernetes/kube-state-metrics/master/examples/standard/cluster-role-binding.yaml \
            -f https://raw.githubusercontent.com/kubernetes/kube-state-metrics/master/examples/standard/cluster-role.yaml \
            -f https://raw.githubusercontent.com/kubernetes/kube-state-metrics/master/examples/standard/deployment.yaml \
            -f https://raw.githubusercontent.com/kubernetes/kube-state-metrics/master/examples/standard/service-account.yaml \
            -f https://raw.githubusercontent.com/kubernetes/kube-state-metrics/master/examples/standard/service.yaml

    - name: NodePort configuration for kube-state-metrics
      blockinfile:
        path: /tmp/kube-state-metrics-nodeport.yaml
        create: yes
        block: |
          ---
          apiVersion: v1
          kind: Service
          metadata:
            labels:
              app.kubernetes.io/name: kube-state-metrics-nodeport
              app.kubernetes.io/version: 1.9.5
            name: kube-state-metrics-nodeport
            namespace: kube-system
          spec:
            type: NodePort
            ports:
            - name: http-metrics
              port: 8080
              nodePort: 32080
              targetPort: http-metrics
            - name: telemetry
              port: 8081
              nodePort: 32081
              targetPort: telemetry
            selector:
              app.kubernetes.io/name: kube-state-metrics

    - name: Init kube-state-metrics.
      shell: kubectl apply -f /tmp/kube-state-metrics-nodeport.yaml
  when: not kubectl_metrics.rc == 0
