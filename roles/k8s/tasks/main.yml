---
- name: resolve platform specific vars
  include_vars: '{{ docker_vars }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml'
        - '{{ ansible_distribution }}.yml'
        - '{{ ansible_os_family }}.yml'
      skip: true
      paths:
        - '{{ role_path }}/../../vars'
  loop_control:
    loop_var: docker_vars

- name: set facts for minikube
  set_fact:
    "minikube_use_calico": "{{ use_calico|bool }}"
    "minikube_use_nginx": "{{ use_nginx|bool }}"
    "user_home": "{{ lookup('env','HOME') }}"
    "minikube_check": !unsafe >-
      minikube status --format "host: {{.Host}} kubelet: {{.Kubelet}} apiserver: {{.APIServer}} kubectl: {{.Kubeconfig}}"
    "minikube_driver": "{{ 'none' if not use_driver or use_driver == 'none' else ('hyperkit' if ansible_os_family == 'Darwin' else 'kvm2') }}"

- name: Before minikube configuration, we check minikube status
  shell: "{{ minikube_check }} | grep 'host: '"
  args:
    executable: /bin/bash
  register: starting_minikube_status

- name: Install Minikube
  block:
    - name: Tidy up previous Minikube
      become: true
      file:
        path: "{{ kfile }}"
        state: absent
      with_items:
        - "{{ user_home }}/.kube"
        - /var/lib/kubeadm.yaml
        - /data/minikube
        - /var/lib/minikube
        - /var/lib/kubelet
        - /etc/kubernetes
        - /etc/cni
        - /opt/cni
        - /var/lib/calico
      loop_control:
        loop_var: kfile

    - name: Setup the directory for storing Minikube and kubectl configuration.
      file:
        path: "{{ user_home }}/.kube"
        state: directory
        owner: root
        group: "{{ 'wheel' if ansible_os_family == 'Darwin' else 'root' }}"
        mode: "0755"
      become: true
      become_method: sudo
      become_flags: '-E -S -n'
      when: "minikube_driver == 'none'"

    - name: Create empty file(config) under directory.
      file:
        path: "{{ user_home }}/.kube/config"
        state: touch
        mode: "0640"
      become: true
      become_method: sudo
      become_flags: '-E -S -n'
      when: "minikube_driver == 'none'"

    - name: set minikube environment
      blockinfile:
        dest: "{{ user_home }}/{{ rcfile }}"
        create: yes
        block: |
          export MINIKUBE_WANTUPDATENOTIFICATION=false
          export MINIKUBE_WANTREPORTERRORPROMPT=false
          export MINIKUBE_HOME=$HOME
          export CHANGE_MINIKUBE_NONE_USER=true
          export KUBECONFIG=$HOME/.kube/config
        marker: "# {mark} ANSIBLE MANAGED BLOCK for minikube"
      with_items:
        - .profile
        - .bashrc
      loop_control:
        loop_var: rcfile

    - name: Start Minikube with option vm-driver={{ minikube_driver }} and with Calico
      shell: >
        minikube start  --disk-size  {{ minikube_disk_size }}
        --memory  {{ minikube_memory }}
        --cpus {{ minikube_cpus }}
        --extra-config=kubelet.network-plugin=cni
        --extra-config=kubelet.resolv-conf={{ minikube_resolver }}
        --extra-config=kubeadm.pod-network-cidr=10.200.0.0/16
        --network-plugin=cni
        --vm-driver={{ minikube_driver }}
      environment:
        MINIKUBE_WANTUPDATENOTIFICATION: false
        MINIKUBE_WANTREPORTERRORPROMPT: false
        MINIKUBE_HOME: "{{ user_home }}"
        CHANGE_MINIKUBE_NONE_USER: true
        KUBECONFIG: "{{ user_home }}/.kube/config"
      become: "{{ 'true' if minikube_driver == 'none' else 'false' }}"
      become_method: sudo
      become_flags: '-E -S -n'
      when: "minikube_use_calico"

    - name: Start Minikube with option vm-driver={{ minikube_driver }}
      shell: >
        minikube start  --disk-size  {{ minikube_disk_size }}
        --memory  {{ minikube_memory }}
        --cpus {{ minikube_cpus }}
        --extra-config=kubelet.resolv-conf={{ minikube_resolver }}
        --vm-driver={{ minikube_driver }}
      environment:
        MINIKUBE_WANTUPDATENOTIFICATION: false
        MINIKUBE_WANTREPORTERRORPROMPT: false
        MINIKUBE_HOME: "{{ user_home }}"
        CHANGE_MINIKUBE_NONE_USER: true
        KUBECONFIG: "{{ user_home }}/.kube/config"
      become: "{{ 'true' if minikube_driver == 'none' else 'false' }}"
      become_method: sudo
      become_flags: '-E -S -n'
      when: "not minikube_use_calico"

      # host: Running kubelet: Running apiserver: Running kubectl: Correctly Configured: pointing to minikube-vm
    - name: After minikube configuration, we check minikube status
      shell: "{{ minikube_check }}"
      args:
        executable: /bin/bash
      register: minikube_status
      until: "'minikube-vm' and 'host: Running' and 'kubelet: Running' and 'apiserver: Running' in minikube_status.stdout"
      delay: 30
      retries: 10

    - name: Launch calico etcd (sleep to make sure service is allocated for etcd endpoint lookup)
      shell: 'kubectl apply -f {{ calico_etcd_url }} && sleep 3'
      args:
        executable: /bin/bash
      when: "minikube_use_calico"

    - name: Get the etcd endpoint
      shell: "kubectl get service -o json --namespace=kube-system calico-etcd | jq  -r .spec.clusterIP"
      args:
        executable: /bin/bash
      register: etcd_endpoints_check
      when: "minikube_use_calico"

    - name: set etcd_endpoint fact
      set_fact:
        "etcd_endpoint": "{{ etcd_endpoints_check.stdout }}"
      when: "minikube_use_calico"

    - name: Get the calico resource definition
      get_url:
        url: '{{ calico_resource_yaml }}'
        dest: '/tmp/calico.yaml'
      when: "minikube_use_calico"

    - name: Configure calico to point to our etcd
      lineinfile:
        path: /tmp/calico.yaml
        regexp: '^(.*?)etcd_endpoints: "http://<ETCD_IP>:<ETCD_PORT>"'
        line: '\1etcd_endpoints: "http://{{ etcd_endpoint }}:6666"'
        backrefs: yes
      when: "minikube_use_calico"

    - name: Launch calico
      shell: 'kubectl apply -f /tmp/calico.yaml'
      args:
        executable: /bin/bash
      when: "minikube_use_calico"

    - name: Tidy up Calico tmp
      file:
        path: '/tmp/calico.yaml'
        state: absent
      become: yes
      when: "minikube_use_calico"

  when: "not ('minikube-vm' and 'host: Running' and 'kubelet: Running' and 'apiserver: Running' in starting_minikube_status.stdout)"

- name: Enable default NGINX Ingress Controller
  shell: minikube addons enable ingress
  environment:
    MINIKUBE_WANTUPDATENOTIFICATION: false
    MINIKUBE_WANTREPORTERRORPROMPT: false
    MINIKUBE_HOME: "{{ user_home }}"
    CHANGE_MINIKUBE_NONE_USER: true
    KUBECONFIG: "{{ user_home }}/.kube/config"
  become: true
  become_method: sudo
  become_flags: '-E -S -n'
  when: "minikube_use_nginx"

- name: Activate Traefik Ingress Controller
  block:

    - name: Get the ingress status
      shell: "minikube addons list | grep ingress"
      args:
        executable: /bin/bash
      register: ingress_check

    - name: set etcd_endpoint fact
      set_fact:
        "ingress_state": "{{ ingress_check.stdout }}"

    - name: Disable default NGINX Ingress Controller
      shell: minikube addons disable ingress
      environment:
        MINIKUBE_WANTUPDATENOTIFICATION: false
        MINIKUBE_WANTREPORTERRORPROMPT: false
        MINIKUBE_HOME: "{{ user_home }}"
        CHANGE_MINIKUBE_NONE_USER: true
        KUBECONFIG: "{{ user_home }}/.kube/config"
      become: true
      become_method: sudo
      become_flags: '-E -S -n'
      when: '"enabled" in ingress_state'

    # - name: Copy up Traefik template
    #   copy:
    #     src: files/traefik-minikube.yaml
    #     dest: /tmp/traefik-minikube.yaml

    # - name: Launch Traefik
    #   shell: 'kubectl apply -f /tmp/traefik-minikube.yaml'
    #   args:
    #     executable: /bin/bash

    # - name: Tidy up Traefik tmp
    #   file:
    #     path: '/tmp/traefik-minikube.yaml'
    #     state: absent
    #   become: yes
    - name: Install traefik
      shell: |
        helm init
        TMP=`mktemp -d`
        helm fetch stable/traefik --untar --untardir $$TMP
        helm template $$TMP/traefik -n traefik --namespace kube-system --name traefik0 --tiller-namespace kube-system --set externalIP={{ansible_default_ipv4.address}} | kubectl apply -n kube-system  -f -;
        rm -rf $$TMP
      become: true
      become_method: sudo
      become_flags: '-E -S -n'

  when: "not minikube_use_nginx"
