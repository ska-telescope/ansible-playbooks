---
# tasks file for prometheus

- name: ensure Prometheus data directory
  file:
    path: '{{ prometheus_data_dir }}'
    state: directory
    mode: 0766
    owner: "{{ localuser }}"
    group: "{{ localuser }}"
  become: yes

- name: ensure Prometheus configuration directory
  file:
    path: '{{ prometheus_config_dir }}'
    state: directory
    mode: 0755
    owner: "{{ localuser }}"
    group: "{{ localuser }}"
  become: yes

- name: ensure Prometheus rules configuration directory
  file:
    path: '{{ prometheus_config_dir }}/rules/'
    state: directory
    mode: 0755
    owner: "{{ localuser }}"
    group: "{{ localuser }}"
  become: yes

- name: Copy prom_helper to /usr/local/bin
  copy:
    src: "{{ playbook_dir }}/openstack/prom_helper.py"
    dest: "/usr/local/bin/prom_helper.py"
  become: yes

- name: Set environment variables for prom_helper
  blockinfile:
    path: /etc/environment
    block: |
      auth_url="{{ auth_url }}"
      username="{{ username }}"
      password="{{ password }}"
      project_name="{{ project_name }}"
  become: yes

- name: Install cron
  apt:
    pkg:
      - cron
    state: present
    update_cache: yes

# the generated prometheus_node_metric_relabel_configs.yaml must
#  go in the playbook_dir ready to run
- name: Add cron job
  lineinfile:
    path: /etc/crontab
    regexp: 'prom_helper.py'
    line: >-
      30 *     * * *   root    python3 /usr/local/bin/prom_helper.py -g &&
      mv *.json /etc/prometheus/ &&
      cp prometheus_node_metric_relabel_configs.yaml {{ playbook_dir }}/
  become: yes

# touch prometheus_node_metric_relabel_configs.yaml just incase it does not exist
- name: Add cron job for the playbook
  lineinfile:
    path: /etc/crontab
    regexp: 'deploy_prometheus.yml'
    line: >-
      0 4     * * *   root    cd {{ playbook_dir }} &&
      touch prometheus_node_metric_relabel_configs.yaml &&
      git pull &&
      ansible-playbook deploy_prometheus.yml -i hosts --tags "cron"
      --extra-vars
      "prometheus_gitlab_ci_pipelines_exporter_token='{{ prometheus_gitlab_ci_pipelines_exporter_token }}'"
      --extra-vars "password='{{ password }}'"
      --extra-vars "slack_api_url='{{ slack_api_url }}'"
      -e 'ansible_python_interpreter=/usr/bin/python3'
      -e @prometheus_node_metric_relabel_configs.yaml
  become: yes

- name: Generate Prometheus configuration
  become: true
  template:
    src: "{{ playbook_dir }}/roles/prometheus/templates/prometheus.yml.j2"
    dest: "{{ prometheus_config_dir }}/prometheus.yml"
    force: true
    owner: "{{ localuser }}"
    group: "{{ localuser }}"
    mode: 0755

- name: Create alerting rules file
  template:
    src: "{{ playbook_dir }}/roles/prometheus/templates/alert.rules.j2"
    dest: "{{ prometheus_config_dir }}/rules/ansible_managed.rules"
    owner: "{{ localuser }}"
    group: "{{ localuser }}"
    mode: 0755
  when:
    - prometheus_alert_rules != []

- name: Create record rules file
  template:
    src: "{{ playbook_dir }}/roles/prometheus/templates/record.rules.j2"
    dest: "{{ prometheus_config_dir }}/rules/record.rules"
    owner: "{{ localuser }}"
    group: "{{ localuser }}"
    mode: 0755
  when:
    - prometheus_record_rules != []

- name: copy ceph alerting rules
  copy:
    src: "{{ role_path }}/files/rules/ceph/ceph_dashboard.rules"
    dest: "/etc/prometheus/rules/ceph_dashboard.rules"
    owner: "{{ localuser }}"
    group: "{{ localuser }}"
    mode: 0644

- name: copy elasticstack alerting rules
  copy:
    src: "{{ role_path }}/files/rules/elasticstack/elasticsearch.rules"
    dest: "/etc/prometheus/rules/elasticsearch.rules"
    owner: "{{ localuser }}"
    group: "{{ localuser }}"
    mode: 0644

- name: copy kubernetes alerting rules
  copy:
    src: "{{ role_path }}/files/rules/kubernetes/{{ item }}"
    dest: "/etc/prometheus/rules/kubernetes_{{ item }}.rules"
    owner: "{{ localuser }}"
    group: "{{ localuser }}"
    mode: 0644
  with_items:
    - prometheus_alerts.yaml
    - prometheus_rules.yaml

- name: Copy up resource files
  copy:
    src: "{{ role_path }}/files/{{ item }}"
    dest: "{{ prometheus_config_dir }}/{{ item }}"
  with_items:
    - ceph-mgr.json
    - docker_exporter.json
    - elasticsearch_exporter.json
    - gitlab_exporter.json
    - kubernetes_exporter.json
    - kubernetes_telemetry.json
    - node_exporter.json

- name: Pull prometheus image {{ prometheus_docker_tags }}
  docker_image:
    name: prom/prometheus
    tag: "{{ prometheus_docker_tags }}"

- name: Setup config folder # noqa 301 Commands should not change things if nothing needs doing
  shell: |
    [ ! -f "{{ k8s_certificate_authority }}" ] || cp -rf {{ k8s_certificate_authority }} {{ prometheus_config_dir }}
    [ ! -f "{{ k8s_client_certificate }}" ] || cp -rf {{ k8s_client_certificate }} {{ prometheus_config_dir }}
    [ ! -f "{{ k8s_client_key }}" ] || cp -rf {{ k8s_client_key }} {{ prometheus_config_dir }}

- name: Stop prometheus container
  docker_container:
    name: prometheus
    stop_timeout: 180
    state: absent

- name: Start prometheus container
  docker_container:
    name: prometheus
    image: "prom/prometheus:{{ prometheus_docker_tags }}"
    state: started
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.page-title='{{ prometheus_title }}'"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.external-url={{ prometheus_url | default('http://'+ansible_default_ipv4.address+':9090') }}"
    user: root
    memory: "{{ prometheus_memory }}"
    restart: yes
    restart_policy: always
    ports:
     - "9090:9090"
    volumes:
      - "{{ prometheus_config_dir }}:/etc/prometheus:ro"
      - "/etc/hosts:/etc/hosts:ro"
      - "{{ prometheus_data_dir }}:/prometheus"




- name: Check for swap file
  shell: test -f {{ swapfile_path }}
  changed_when: False
  register: is_swapfile

- name: Create swap file
  command: |
    {% if swapfile_fallocate %}
    fallocate -l {{ ((swapfile_size) | int * 1024 * 1024) }} {{ swapfile_path }}
    {% else %}
    dd if=/dev/zero of={{ swapfile_path }} bs=1M count={{ swapfile_size }}
    {% endif %}
  args:
    creates: "{{ swapfile_path }}"
  register: swapfile_register_create
  when: not is_swapfile.rc == 0

- name: Set swap file permissions
  file:
    path: "{{ swapfile_path }}"
    state: "file"
    owner: "root"
    group: "root"
    mode: "0600"
  when: not is_swapfile.rc == 0

- name: Initialize swap file
  command: mkswap {{ swapfile_path }}
  when: not is_swapfile.rc == 0

- name: Enable swap file
  command: swapon {{ swapfile_path }}
  when: not is_swapfile.rc == 0

- name: Manage swap file in /etc/fstab
  mount:
    src: "{{ swapfile_path }}"
    name: "none"
    fstype: "swap"
    opts: "sw,nofail"
    dump: "0"
    passno: "0"
    state: present


# docker run --rm -ti -v /etc/hosts:/etc/hosts:ro -v /etc/prometheus:/etc/prometheus:ro -v /prometheus:/prometheus prom/prometheus:v2.19.2 bash

# /bin/prometheus --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus --web.console.libraries=/usr/share/prometheus/console_libraries --web.console.templates=/usr/share/prometheus/consoles